<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Javascript on Space of Sheva </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://ShevaXu.github.io/tags/javascript/index.xml/</link>
    <language>en-us</language>
    <author>Sheva Xu</author>
    
    <updated>Tue, 23 Dec 2014 22:19:47 CST</updated>
    
    <item>
      <title>Embracing HTML5 and HEVC for web videos&#39; future</title>
      <link>http://shevaxu.github.io/post/html5video/</link>
      <pubDate>Tue, 23 Dec 2014 22:19:47 CST</pubDate>
      <author>Sheva Xu</author>
      <guid>http://shevaxu.github.io/post/html5video/</guid>
      <description>

&lt;p&gt;Once upon a time, &lt;em&gt;Adobe Flash&lt;/em&gt; was dominated for web video playing, and myself used to be a fan of the Flash family, having fun with actionscript for a while. But now it has to worry about its future since more and more complains against its being closed, proprietary, power-consumed and not touch friendly.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Flash&lt;/em&gt; was created during the PC era â€“ for PCs and mice&amp;hellip; New open standards created in the mobile era, such as &lt;em&gt;HTML5&lt;/em&gt;, will win on mobile devices (and PCs too).&lt;/p&gt;

&lt;p&gt;&amp;ndash; Steve Jobs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For now Apple seems to have won this battle and &lt;a href=&#34;https://www.apple.com/hotnews/thoughts-on-flash/&#34;&gt;the &lt;em&gt;thoughts on flash&lt;/em&gt; letter&lt;/a&gt; appeared to be the death sentence in advance. But the emergence of HTML5 might be the fuse of Flash&amp;rsquo;s fall down.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;HTML5 Video Element&lt;/h2&gt;

&lt;p&gt;Most modern browsers support the HTML5 &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; element/tag. The embedding is simple:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;video width=&amp;quot;640&amp;quot; height=&amp;quot;360&amp;quot; controls&amp;gt;
  	&amp;lt;source src=&amp;quot;movie.mp4&amp;quot; type=&amp;quot;video/mp4&amp;quot;&amp;gt;
  	&amp;lt;source src=&amp;quot;movie.ogg&amp;quot; type=&amp;quot;video/ogg&amp;quot;&amp;gt;
  	&amp;lt;source src=&amp;quot;movie.webm&amp;quot; type=&amp;quot;video/webm&amp;quot;&amp;gt;
	Your browser does not support the video tag.
&amp;lt;/video&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(The video and related material are from the Paypal &lt;a href=&#34;http://paypal.github.io/accessible-html5-video-player/&#34;&gt;demo&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;The multiple sources/formats above are for different and if indeed different movies are provided, the first recognized one will be played. I will talk about video format later, let&amp;rsquo;s see what it really looks like first:&lt;/p&gt;

&lt;video width=&#34;640&#34; height=&#34;360&#34; controls&gt;
    
    &lt;source src=&#34;https://www.paypalobjects.com/webstatic/mktg/videos/PayPal_AustinSMB_baseline.mp4&#34; type=&#34;video/mp4&#34; /&gt;
    &lt;source src=&#34;https://www.paypalobjects.com/webstatic/mktg/videos/PayPal_AustinSMB_baseline.webm&#34; type=&#34;video/webm&#34; /&gt;
    
    Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;Not bad, huh. It has most of what you want from a web video player: the playback control and the volumn bar are all ready, and you can even make it full-screen. These actions can also be control using &lt;em&gt;JavaScript&lt;/em&gt;, which can actually achieve far more customizations of the player&amp;rsquo;s behaviours. For example, you can control when it should &lt;em&gt;play()/pause()&lt;/em&gt; by another &lt;em&gt;button&lt;/em&gt; element. For more details, see the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Using_HTML5_audio_and_video&#34;&gt;mozilla guide&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Video.js&lt;/h2&gt;

&lt;p&gt;I did not realize what is missing for the native player till I saw &lt;em&gt;Video.js&lt;/em&gt;:
it should at least shows something, say, a poster/preview picture, before the video being played; and it would be better if it can play subtitles. And that&amp;rsquo;s not the only things Video.js offers.&lt;/p&gt;

&lt;p&gt;It is &lt;a href=&#34;https://github.com/videojs/video.js&#34;&gt;open-source&lt;/a&gt; and easy to use, with a well-decorated &lt;a href=&#34;http://www.videojs.com/&#34;&gt;website&lt;/a&gt; and even an &lt;a href=&#34;http://designer.videojs.com/&#34;&gt;online designer&lt;/a&gt; to help you stylish your player. I did not stylish my own player yet because its default appearance looks satisfactory already:&lt;/p&gt;

&lt;script src=&#34;//vjs.zencdn.net/4.11/video.js&#34;&gt;&lt;/script&gt;

&lt;video class=&#34;video-js vjs-default-skin&#34; controls preload=&#34;auto&#34; width=&#34;640&#34; height=&#34;360&#34;  poster=&#34;http://paypal.github.io/accessible-html5-video-player/media/poster_PayPal_Austin2.jpg&#34;  data-setup=&#39;{}&#39;&gt;
    
    &lt;source src=&#34;https://www.paypalobjects.com/webstatic/mktg/videos/PayPal_AustinSMB_baseline.mp4&#34; type=&#34;video/mp4&#34; /&gt;
    &lt;source src=&#34;https://www.paypalobjects.com/webstatic/mktg/videos/PayPal_AustinSMB_baseline.webm&#34; type=&#34;video/webm&#34; /&gt; 
    
    
    &lt;track kind=&#34;captions&#34; label=&#34;English&#34; src=&#34;/media/captions_PayPal_Austin_en.vtt&#34; srclang=&#34;en&#34; default /&gt; 
    
    &lt;p class=&#34;vjs-no-js&#34;&gt;
        Please enable JavaScript or consider upgrading to a modern browser.
    &lt;/p&gt;
&lt;/video&gt;

&lt;p&gt;Embedding this player just needs a couple lines of html and I won&amp;rsquo;t show it here since you will find out right on its website. What I show here is the &lt;strong&gt;shortcode&lt;/strong&gt; I write to embed it in &lt;em&gt;&lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt;&lt;/em&gt; (the site generator I used for this blog) rendered Markdown:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&amp;quot;//vjs.zencdn.net/4.11/video.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;!-- The video --&amp;gt;
&amp;lt;video class=&amp;quot;video-js vjs-default-skin&amp;quot; controls preload=&amp;quot;auto&amp;quot;
width=&amp;quot;640&amp;quot; height=&amp;quot;360&amp;quot; {{ with .Get &amp;quot;poster&amp;quot; }} poster=&amp;quot;{{ . }}&amp;quot; {{ end }} data-setup=&#39;{}&#39;&amp;gt;
	{{ with .Get &amp;quot;src&amp;quot; }}
	&amp;lt;source src=&amp;quot;{{ . }}.mp4&amp;quot; type=&amp;quot;video/mp4&amp;quot; /&amp;gt;
	&amp;lt;source src=&amp;quot;{{ . }}.webm&amp;quot; type=&amp;quot;video/webm&amp;quot; /&amp;gt;
	{{ end}}
	{{ with .Get &amp;quot;vtt&amp;quot; }}
	&amp;lt;track kind=&amp;quot;captions&amp;quot; label=&amp;quot;English&amp;quot; src=&amp;quot;{{ . }}&amp;quot; srclang=&amp;quot;en&amp;quot; default /&amp;gt;
	{{ end }}
	&amp;lt;p class=&amp;quot;vjs-no-js&amp;quot;&amp;gt;
		Please enable JavaScript or consider upgrading to a modern browser.
	&amp;lt;/p&amp;gt;
&amp;lt;/video&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the &amp;ldquo;caller&amp;rdquo; in Markdown:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ % videojs src=&amp;quot;url/to/file.no-extension&amp;quot; poster=&amp;quot;url/to/an/image&amp;quot; vtt=&amp;quot;the-subtitle.vtt&amp;quot; % }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; that there should be no space between &lt;code&gt;{{&lt;/code&gt; and &lt;code&gt;%&lt;/code&gt;, I separate them above to prevent &lt;em&gt;Hugo&lt;/em&gt; manipulate it instead of showing it as codes. I miss that in the &lt;a href=&#34;http://gohugo.io/extras/shortcodes/&#34;&gt;&lt;em&gt;shortcodes docs&lt;/em&gt;&lt;/a&gt; and suffered from it for a while.&lt;/p&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;Alternatives&lt;/h3&gt;

&lt;p&gt;Another player I found was the &lt;em&gt;Accessible HTML5 Video Player&lt;/em&gt;, aka px-video.js, which was actually the first customized HTML5 player occurred to me through its &lt;a href=&#34;http://paypal.github.io/accessible-html5-video-player/&#34;&gt;online demo&lt;/a&gt;. It&amp;rsquo;s also &lt;a href=&#34;https://github.com/paypal/accessible-html5-video-player&#34;&gt;Github&lt;/a&gt; open-source, and provides similar functionalities.&lt;/p&gt;

&lt;p&gt;After all, I decided to use Video.js for this site mainly for the sake of Hugo compatibility. The comparison between these two here is from the viewpoint of embedding it in Markdown (then static html) by &lt;em&gt;Hugo shortcode&lt;/em&gt;. Both of them need to include a js script and a css stylesheet. However, &lt;em&gt;Video.js&lt;/em&gt; only requires changing the class of the video tag while &lt;em&gt;px-video.js&lt;/em&gt; requires additional initialization script, which make it more prone to unexpected errors during Hugo rendering. I indeed happened during my developing/blogging. (And the online designer and complete docs are extra bonuses for Video.js.)&lt;/p&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;TODOs&lt;/h3&gt;

&lt;p&gt;I had an impulse to implement my own customized player once. But then I thought why should I bother rebuilding the car from the wheels while I had one running. So I narrow down what should be done further, if necessary:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The subtitle (&lt;a href=&#34;http://dev.w3.org/html5/webvtt/&#34;&gt;.vtt&lt;/a&gt; format) now suffers the &lt;a href=&#34;http://en.wikipedia.org/wiki/Same-origin_policy&#34;&gt;&lt;em&gt;same origin policy&lt;/em&gt;&lt;/a&gt; problem, so I have to save it locally before going deep into &lt;a href=&#34;http://enable-cors.org&#34;&gt;CORS&lt;/a&gt; support.&lt;/li&gt;
&lt;li&gt;In the shortcodes, the height and width should also be able to specify.&lt;/li&gt;
&lt;li&gt;Try out the online designer to make the player matching the theme of this site.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Canvas&lt;/h2&gt;

&lt;p&gt;Another benefic of using HTML5 video is you can manipulate the video data in real time and incorporate any visual effect you want with the help of &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;You can accomplish that by 3 simple steps:&lt;/p&gt;

&lt;p&gt;I. put a video element and a canvas element into the html, and get them in javascript;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;video id=&amp;quot;vid&amp;quot; src=&amp;quot;video.mp4&amp;quot;/&amp;gt;
&amp;lt;canvas id=&amp;quot;cvs&amp;quot; width=&amp;quot;320&amp;quot; height=&amp;quot;240&amp;quot;/&amp;gt;
...
var vid = document.getElementById(&#39;vid&#39;);
var cvs = document.getElementById(&#39;cvs&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;II. get a handle of the 2D context of the canvas and draw video content on it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var ctx = cvs.getContext(&#39;2d&#39;);
// this can be triggered by a timer or a button click
ctx.drawImage(vid, 0, 0, width, height);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;III. get the image data out of the context, do whatever:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var frame = ctx.getImageData(0, 0, w, h);
// access the RGBA element of pixel i
var r = frame[i * 4 + 0];
var g = frame[i * 4 + 1];
var b = frame[i * 4 + 2];
var a = frame[i * 4 + 3];
...
// put it back to another canvas context with changed frame
ctx2.putImageData(frame2, 0, 0);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, a lot more can be done on the canvas, &lt;a href=&#34;http://diveintohtml5.info/canvas.html#divingin&#34;&gt;this tutorial&lt;/a&gt; a good starting point, or &lt;a href=&#34;http://www.html5multimedia.com/code/ch9/video-canvas-screenshot.html&#34;&gt;the screenshot demo&lt;/a&gt;. However, I plan to explore so much more that I think it should be in another post. So I will spare an example here and turn my focus back to videos.&lt;/p&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;HEVC&lt;/h2&gt;

&lt;p&gt;The emergence of HEVC (a.k.a H.265) is another excitement of the future of videos. It&amp;rsquo;s said to be half the size of the now dominating H.264 format while keeping the same visual quality. (If you only know the container, e.g., mkv or mp4, and never heard of real video format, you may skip this part.)&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s really a savior for 4K and even 8K videos. However, it&amp;rsquo;s still too early for HEVC to take over H.264&amp;rsquo;s world since the encoding/decoding cost of HEVC are much higher (for encoding it&amp;rsquo;s time and computation resources consumed, and for decoding it&amp;rsquo;s the power and speed).&lt;/p&gt;

&lt;p&gt;I would not dive into explaining the detailed pros/cons and the future of it (it will become dominating for a while and being taken over by another more advanced format, for sure). Rather, I&amp;rsquo;d like to show an example of how to play it on a not-yet-naively-supported browser.&lt;/p&gt;

&lt;p&gt;The open-source project &lt;a href=&#34;www.libde265.org&#34;&gt;libde265&lt;/a&gt; provides a javascript decoder for it. Below are just a copy of its original &lt;a href=&#34;https://strukturag.github.io/libde265.js/&#34;&gt;demo&lt;/a&gt; with video content substituted (I re-encoded the video clip to make the whole post concistent). The decoded frames also utilize the canvas element:&lt;/p&gt;

&lt;p&gt;
&lt;button id=&#34;play-hevc&#34;&gt;Play&lt;/button&gt;&amp;nbsp;
&lt;span id=&#34;status&#34;&gt;The blank space below are the canvas for the HEVC video.&lt;/span&gt;
&lt;/p&gt;

&lt;canvas id=&#34;hevc-display&#34; width=&#34;640&#34; height=&#34;360&#34;&gt;&lt;/canvas&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;../../js/libde265.min.js&#34;&gt;&lt;/script&gt;

&lt;script&gt;

var VIDEO_URL = &#34;../../media/paypal.hevc&#34;;

var player = null;

window.onload = function() {
    var video = document.getElementById(&#34;hevc-display&#34;);
    var status = document.getElementById(&#34;status&#34;);

    var playback = function(event) {
        event.preventDefault();
        if (player) {
            player.stop();
        }

        player = new libde265.RawPlayer(video);
        player.set_status_callback(function(msg, fps) {
            switch (msg) {
            case &#34;loading&#34;:
                status.innerHTML = &#34;Loading movie...&#34;;
                break;
            case &#34;initializing&#34;:
                status.innerHTML = &#34;Initializing...&#34;;
                break;
            case &#34;playing&#34;:
                status.innerHTML = &#34;Playing...&#34;;
                break;
            case &#34;stopped&#34;:
                status.innerHTML = &#34;&#34;;
                break;
            case &#34;fps&#34;:
                status.innerHTML = Number(fps).toFixed(2) + &#34; fps&#34;;
                break;
            default:
                status.innerHTML = msg;
            }
        });
        player.playback(VIDEO_URL);
    };

    var button = document.getElementById(&#34;play-hevc&#34;);
    if (button.addEventListener) {
        button.addEventListener(&#34;click&#34;, playback, false);
    } else if (button.attachEvent){
        button.attachEvent(&#39;onclick&#39;, playback);
    }
};

&lt;/script&gt;

&lt;p&gt;Note that the original clip is a 02:29.14 long 720p (1280x720) H.264 video with file size as large as 28.8MB. I resized and encoded the HEVC clip to 01:00.00 long 360p (640x360), and the file is only 2.4MB. A H.264 video with the same duration and resolution will require up to 10MB. What a save! That&amp;rsquo;s why I can upload it to my site without any concern.&lt;/p&gt;

&lt;p&gt;But the downside is obvious too: it is not well supported. The HTML5 player can not play it yet. The js decoder in the above example lacks further control (at least sync to play in normal speed) and can not play sound (both you might already notice). So there&amp;rsquo;s a long way to go.&lt;/p&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;Look Ahead&lt;/h2&gt;

&lt;p&gt;Anyway, the staffs I show above are the two most promising technology I recall when talking about videos. If you are not a developer nor in related industries, you may consider it a sip into some new juices. Hope you will think of these when you watch a 4K/8K movie through a browser in the future.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>